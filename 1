- 시스템보안
	- 클라이언트 보안
		- 관리
			- 운영체제
			- 인증, 접근통제
			- 파일시스템
			- 공격기술
			- 유/무선 단말기 보안
	- 서버 보안
		- 활용
			- 운영체제
			- 시스템 최적화
			- 시스템 로그
			- 공격 대응 기술
			- 점검 도구
			- 로깅 및 로그분석
			- 백업
		- 보안용 소프트웨어
			- 서버 접근 통제
			- 시스템 취약점 점검 도구
			- 서버 보안 시스템
			- 무결성 점검 도구
			= 로깅 및 로그분석 도구

- CPU
	- Central Processing Unit
	- 주기억장치에서 자료 받아 연산하는 장치
	- 구성요소
		- ALU
			- Arithmetic and Logical Unit. 
			- 산술논리장치. 산술, 논리 연산
		- 레지스터
			- 중간결과 고속기억
			- 종류
				- PC (Program Counter)
					- 다음 주기억장치 주소 저장
				- MAR (Memory Address Register)
					- 주기억장치 주소 저장
				- MBR (Memory Buffer Register)
					- 주기억장치 입출력자료 저장
				- IR (Instruction Register)
					- 주기억장치 인출 명령코드 저장
		- 제어장치
			- 명령어 해석, 제어신호
		- CPU버스
			- 레지스터 간 데이터 이동
	- 주기억장치
		- CPU가 처리하고 있는 내용 저장, 메모리에 접근/변경 가능
		- 종류
			- ROM
				- Read Only Memory
				- 읽기만 가능, 비휘발성
			- RAM
				- Random Access Memory
				- 읽고쓰기 가능, 휘발성
	- 보조기억장치
		- 물리적인 디스크와 연결된 기억장치
		- 종류
			- HHD
				- Hard Disk Driver
				- 물리적 저장소
			- SSD
				- Solid State Driver
				- 반도체 기반 저장소
	- 명령 실행 주기
		- 인출
			- 메모리 데이터를 로드하여 레지스터에 저장
		- 간접
			- 메모리 참조시 그 주소 참조
		- 실행
			- 산술, 논리 연산
		- 방해
			- 사고시에도 업무처리 가능
	- 메모리계층
		- 레지스터 > 캐시 > 주기억장치 > 보조기억장치
		- 용량이 커짐. 비용 작아짐. 속도 느려짐.
	- 캐시
		- CPU와 메모리 간 속도 차이를 위한 버퍼
		- 메모리관리
			- CPU가 원하는 데이터가 캐시메모리에 있을수 있게 하는것
		- 매핑방식
			- 직접매핑
				- 주기억장치 순서대로 캐시와 매핑
			- 집합 연관매핑
				- 직접 + 연관
			- 연관매핑
				- 주기억장치 순서없이 캐시와 매핑
		- 호출기법
			- Demand-Fetch
				- 필요시 캐시 인출
			- Pre-Fetch
				- 예상되는 데이터 인출
		- 메모리 교체
			- FIFO
				- First in First Out
				- 자주 사용되는 페이지 교체 가능
			- LFU
				- Least Frequently Used
				- 최근 페이지 교체 가능
			- LRU
				- Least Recently Used
				- 오버헤드
			- NUR
				- Not Used Recently
				- 가장 오래된 페이지 미보장
			- 발생가능 문제점
				- Page fault
					- 부재하는 PAGE 사용하려함
				- demand paging
					- 요구될때만 PROCESS가 PAGE 적재
				- Thrashing
					- 부재가 빈번해 프로세스 수행보다 교체가 오래걸림
		- 메모리 교체 문제해결
			- 페이지 교체
				- 물리적 메모리에 올라온 페이지 중 하나를 선택해 디스크의 스왑 영역으로 보내는 것.
				- 페이지 부재 발생시 요청 페이지 디스크서 메모리로 읽어와야 하는데 물리적 메모리에 빈 프레임이 없는경우 발생
			- Load Control
			- Locality
			- Working Set
			- PFF
	- 워드, 블록, (페이지, 세그먼트)
		- CPU, 주기억장치, 보조기억장치의 최소 단위
	- 스왑
		- 여유공간 위해 안쓰는 항목 메모리서 하드로 옮김
	- 보조기억장치
		- 가상메모리
			- 주기억장치를 늘리기 위해 보조기억장치를 마치 주기억장치같이 사용하는 방법
			- 가상메모리 주소를 줘 메모리가 커보이게 하는 관리기법
			- 단위
				- 페이지
					- 동일 크기 분할
				- 세그먼트
					- 용도별 분할	
	- I/O 인터페이스
		- 주변장치와 버스를 연결
		- CPU 경유
			- 프로그램에 의한 I/O
				- CPU가 주변장치 연속 감시, polling
			- 인터럽트에 의한 I/O
				- 인터럽트 감지시 중지. 동작 도중 CPU 다른일 가능
		- CPU 비경유
			- DMA
				- Direct Memory Access
				- 메모리가 I/O간 직접전송되어 빠름.
			- I/O processor
				- I/O장치의 복잡함으로 DMA 한계 보완.
					- Multiplexer Channel
					- selector
- 운영체제
	- 컴퓨터 시스템 자원 효율적 관리. 편의성 환경 제공.
	- 목적
		- 처리능력, 신뢰성, 응답시간, 자원활용률, 가용성
	- 관리대상
		- 프로세스, 기억장치, 주변장치, 파일
	- 프로세스
		- 실행중인 프로그램, 레지스터, 스택, 포인터, 데이터의 집합체이며 자원할당의 기본단위.
		- 구성
			- CPU시간
				- 프로그램이 CPU 차지한 시간
			- 주소공간
				- 물리적 실체 대응하는 주소 범위 정의한 공간
			- 독립된 메모리
				- stack
					- 지역변수, 매개변수 등 임시메모리 저장. 함수 호출시 생성, 종료 시 반환
				- heap
					- malloc, new 등 프로그래머 동적 사용 공간
				- data
					- 전역변수, 정적변수, 배열, 구조체 등 메모리 저장. 프로세스 종료까지 유지
				- code
					- 작성한 코드 저장. 프로세스 종료까지 유지
		- 특징
			- 프로세스 당 최소 1개 스레드
			- 별도 주소공간에서 실행
			- 프로세스간 변수는 기본적으로 접근 불가하며 통신을 통해 접근해야함
				
	- 스레드
		- 프로세스 내 동작 여러 실행의 흐름, 주소공간과 힙공간 공유하는 cpu 이용의 최소단위
		- 특징
			- 스택만 따로 할당받고 code, date, heap 공유
	- CPU 스케줄링
		- 프로세스 순서 정함
		- 점유 방식
			- 비선점
				- 프로세스 CPU 점유시 독점하며 자진 반납시까지 실행 보장 
				- 종류
					- FCFS
						- First Come First Service
					- SJF
						- Short Job First
					- HRN
						- Highest Ratio Next
			- 선점
				- 프로세스 CPU 점유시 타 프로세스가 CPU 회수가능
				- 종류
					- Round-Robin
						- 같은 시간 할당
					- SRT
						- SJF + 선점
					- Multi Level Queue
						- 하이브리드 스케줄링, 종류별 큐마다 독자적 알고리즘 따라 CPU 할당
					- Multi Level Feedback Queue
						- 하이브리드 스케줄링, 프로세스마다 가중치를 부여해 우선순위큐/라운드로빈 처리
		- 병행 제어
			- 상호배제
				- 공유 불가 자원의 동시 사용 회피하는 알고리즘. 다수 프로세스가 동일 자원 접근시 무결성 보장. 임계영역이란 개념으로 구현.
				- 임계영역
					- 공유자원의 독점을 보장하는 코드영역. mutex.
				- 세마포어
					- 프로세스의 접근 제어하며 프로세스 사이 동기 유지
					- 잠자기와 깨우기 연산 이용, 공유자원 수 변수 사용
					- ex. 빵을 10개만 굽고 자는 주인을 깨우며 빵을 사가는 손님. 빵이 0개면 자는 손님을 깨우며 빵을 채우는 주인.
				- 모니터
					- 언어 수준에서 동시성을 제어하며 타이밍 오류를 해결한 상호배제 기법
					- 상호배제 구현위해 별도 프로그램 필요 없으며, 공유자원을 모니터 내부 지역변수로 정의.
					- 특징
						- 세마포어의 이론적 기반.
						- 순차적으로 사용 가능한 공유자원 및 그룹 할당
						- 데이터, 프로시저를 포함하는 병행성 구조
			- 교착상태
				- 프로세스가 진행이 안되는 특정한 사건 대기.
				- 발생 조건
					- 상호배제
						- 다수가 요구하는 자원에 대해 배타적 통제권 요구
					- 점유/대기
						- 자원이 할당된 상태에서 다른 자원을 기다림
					- 비선점
						- 자원 점유 불가
					- 순환대기
						- 각 프로세스가 순환적으로 다음 프로세스가 요구하는 자원을 가짐
				- 대응
					- 예방
						- 상호배제
							- 자원 공유 불가 조건 제거
						- 점유/대기
							- 필요 자원 일시에 요청	
						- 비선점
							- 선점 프로토콜 제공
						- 환형대기
							- 프로세스에게 각 자원의 유형별로 우선순위 결정
					- 회피
						- 자원 할당 그래프 알고리즘
							- 자원 타입당 가용 인스턴스 하나일 경우 사용. 클레임 화살표로 데드락 예측해 자원 할당을 대기.
							- 클레임 화살표
								- 추후에 자원 요청 가능성 있다는걸 의미
						- 은행원 알고리즘
							- 자원당 가용 인스턴스 다수여도 사용 가능. 프로세스에게 자원을 할당했을 때 안전상태 유지하는 경우만 할당하고 그렇지 않으면 대기
							- 안전상태
								- 교착상태를 일으키지 않으며 각 프로세스가 요구한 최대 요구량만큼 필요한 자원을 할당해 줄 수 있는 상태.
								- 시스템 가용자원, 프로세스의 점유자원과 요청자원을 계산해 최적의 순서로 프로세스를 스케줄링 하는 안전순서열이 존재.
								- 불안전상태 = 데드락상태
							- 단점
								- 할당 가능 자원 수가 일정해야 함
								- 프로세스 수가 일정해야 함
								- 자원 이용도가 낮음
					- 탐지
						- 교착상태 발견 알고리즘
						- 자원 할당 그래프
							- 프로세스가 자원을 요청하고 자원이 프로세스에게 할당되는 방향성을 가진 그래프로, 데드락 발생 여부를 탐지할 수 있는 그래프. 
					- 복구
						- 프로세스 중지
						- 자원 선점
			- 프로세스간 통신
				- message queue
					- 선입선출 기반 통신 수행
- 디스크
	- 디스크 접근시간
		- 탐색시간
			- 특정 실린더로 디스크 헤드 도달 시간
		- 회전 지연시간
			- 섹터가 디스크 헤드 도달 시간
		- 전송시간
			- 데이터 전송 시간
	- 디스크 스케쥴링 기법
		- FCFS
			- First Come First Served
		- SSTF
			- Shortest Seek Time First
		- SCAN
			- Head가 이동하는 모든 요청 서비스 끝까지 처리후 역방향 처리
		- C-SCAN
			- SCAN에서 바깥에서 안쪽으로 이동
		- C-LOOK
			- 진행방향 요청 없을 시 헤드 처음 위치 이동
- 파일 시스템
	- FAT (File Allocation Table)
		- FAT16
			- MS 호환. 2GB. 암호화 및 압축 불가능. 파일명 최대 영문 8자. 클러스터당 1632B
		- FAT32
			- 2TB, 암호화 및 압축 불가능, 파일명 최대 영문 256글자. 클러스터 4KB
		- NTFS (New Technology File System)
			- 암호화 및 압축 지원. 가변 클러스터 기본 4KB. 트랜잭션 로깅 통한 복구. Window NT이상.
	- EXT (EXTended file system)
		- EXT
			- MINIX file system 보완. 최대 2GB. 파일명 255byte. 접근제어, inode수정, 타임스탬프 수정 안됨. 단편화 심해지는 문제.
		- EXT2
			- 2GB, 디렉토리 개수제한 증가, FSCK 오류수정, 볼륨 32TB, 저장중 오류시 파일시스템 손상가능.
		- EXT3
			- 저널링기능, 온라인 파일 시스템 증대, 시스템 변경시 저널에 수정내용 기록, 온라인 조각모음 불필요, 디스크 조각화 최소화
		- EXT4
			- 16TB, 볼륨은 1EB, blocking mapping, 저널 checksum, 하위호환성, delayed allocation, 온라인 조각모음, persistent pre-allocation.
	- UFS (UNIX FILE SYSTEM)
		- 슈퍼블록
			- 파일 시스템 크기, I-NODE 테이블의 크기
		- I-NODE 테이블
			- 파일 정보, 파일 크기, 위치, 유형 허가권, 날짜
		- VTOC 디스크 레이블, 부트블록, 실린더그룹, 데이터블록....
	- RAID ( Redundant Array of Independent Disks)
		- 디스크 고장 시 복구 위해 2개 이상 디스크에 데이터 저장
		- RAID 0 (Concatenate)
			- 디스크 모아 하나의 큰 디스크 
			- 나누어 저장하나 중복 저장은 않기에 복구 불가
		- RAID 1 (Mirroring)
			- 디스크 완전 이중화, 비용 많이 발생, READWRITE 병렬 가능해 속도 빠름
		- RAID 2 (Hamming Code ECC)
			- HAMMING CODE 이용해 오류 복구
			- parity ECC 없는 디스크 복구 위해 개발, 별도 디스크 ECC 저장
		- RAID 3(Parity ECC)
			- 페리티 정보 별도 디스크에 byte별 저장
		- RAID 4(Parity ECC, block)
			- 페리티 정보 별도 디스크에 블록별 저장
		- RAID 5(Parity ECC, disperse)
			- 분산 페리티 구현, 안정성 향상
		- RAID 6(Parity ECC, multi disperse)
			- 분산 복수 페리티 구현, 장애발생 상황에서 추가 장애 발생시에도 정상 동작.
	
- 리눅스
	- 리눅스 구성요소
		- 애플리케이션
			- User app
			- daemon
				- 운영체제 상에서 사용자 직접 제어 않고 백그라운드 작업 프로그램
				- 시스템 프로세스, 윈도우 서비스 라고도 부름
				- 동작
					- 스탠드얼론
						- 혼자 요청 받아 처리, 서비스 대부분 이 형식 
						- 요청 언제 들어올지 모르는 상태에서 서비스 가능. 다른작업 없이 바로 데몬이 요청 처리 가능.
					- 슈퍼데몬
						- 데몬이 직접 서비스 수행 않고 들어온 요청 따라 해당 데몬 실행
						- xinetd라는 데몬, 받은 요청에 맞춰 해당되는 데몬 메모리에 적재해 처리.
				- 윈도우 서비스
					- 오랜시간 실행, 특정 기능 수행 실행파일, 사용자 미 간섭 설계. 
					- 윈도우 운영체제 시동시 백그라운드 모드에서 실행
		- 쉘
			- 사용자와 운영체제 간 통역해주는 명령어 해석기. 커널을 감싼 껍데기. 커널과 어플리케이션 사이 위치. 
			- 환경변수
				- 특정한 의미로 설정된 값.
				- env : 모든 변수 확인
			- 종류
				- C 셸
					- .cshrc 에 환경변수 저장.
				- Korn 셸
					- .kchrc .profile 에 환경변수 저장.
				- bash 셸
					- C 셸, Korn 셸 결합. 리눅스에서 가장 많이 사용.
				- TC 셸
					- C 셸 강화. 명령 편집.
			- 셸 쇼크
				- 환경변수에 빈 함수 넣으면 뒤에 오는 코드 모두 실행. 명령실행, 관리자권한 취득가능. 
		- 커널
			- 하드웨어와 소프트웨어를 연결하는 운영체제의 핵심, 프로세스 분배 등 시스템 자원 제어, 주기억장치에 상주.
		- 파일 시스템
			- 정보 저장 기본 구조로 트리구조.
			- 부트블록
				- 부팅에 관련된 이미지를 가졌으며, 운영체제가 시작되면 제일 처음 읽음
				- 부트블록이 주기억장치에 올라가면 init을 가동. 이경우PID는 1번 부여 
			- 수퍼블록
				- 파일시스템 크기, 빈 블록 리스트, 다음 블록 인덱스, inode 크기 등
			- inode
				- 리눅스 커널이 현재 사용하는 자료구조를 유지하는 구조체, 파일/디렉토리에 관한 모든 정보.
				- 파일에 고유하게 부여, 커널과 파일시스템이 이를 통해 관리.
				- 정보
					- 소유자의 사용자 ID, 그룹ID, 파일크기
					- 파일 생성 시간, 사용 시간, 변경 시간
					- 파일 링크 수, 접근 모드, 데이터블록 주소
				- 기능
					- 할당 및 적용
					- 파일 생성
					- 파일 링크
						- 심볼릭 링크
							- 윈도우의 바로가기. 
							- 파일명이 너무 긴 경우 이를 대신해 링크정보를 포함시킨 inode 를 만들고, 원래 파일의 포인터를 정보로 가짐.
						- 하드 링크
							- 복사본. 원본을 삭제하거나 이동해도 보존.
					- 파일 삭제
				- 블록 관리 방법
					- 단일/이중/삼중 간접블록. 포인터 개념.
			- 데이터블록
				- 실제 데이터 저장
			- 명령어
				- fdisk. 하드 초기화 및 디스크 파티션 
				- mkfs. 하드 디스크 생성
				- fsck. 무결성 검사
				- mount. 시스템간 디렉터리 공유. 
	- 리눅스 부팅
		- 부트로더. 보조기억장치 OS, 주기억장치로 이동. 
			- LILO. /etc/lilo.conf
			- GRUB. /boot/grub/grub.conf
		- 순서
			- ROM BIOS > MBR, 부트로더, 커널 실행 > 커널, 하드웨어 확인, root 읽기전용 마운트 수행 > 
			- 커널, 디스크 검사, root 쓰기전용 마운트 수행. > init 프로세스, PID 1번 할당, /etc/initab 활성화. > init, run level 따라 상이하게 작동
			- run level
				- 0 : PROM 감시
				- 1 : 관리상태 단계. 암호변경시 사용.
				- 2 : 공유자원 안가진 다중사용자단계.
				- 3 : 공유자원 가진 다중사용자단계
				- 5 : 3 기동후 X-window 그래픽모드
				- 6 : 재부팅. 3으로 재부팅. 
		- MBR(Master boot record)
		- VBR(Volumn Boot Record)
	- 리눅스 디렉토리
		- bin, 실행파일. boot, LILO. etc, 환경설정. dev, 장치파일. var, 임시파일. proc, 운영체제 정보
	- 리눅스 인증
		- 패스워드 입력 > /etc/passwd(shadow) 와 해시함수끼리 비교
			- pwconv. shadow 에 저장하고 싶다
		- john the ripper
			- 크래킹. 패스워드 탈취. brute force. 
	- 리눅스 권한 관리
		- 4 : READ, 2 : WRITE, 1 : EXECUTE. USER/GROUP/OTHER
		- chown : User 변경
		- 파일 : 666, 디렉토리 : 777
			- 파일
				- 실제 정보 담은 개별 문서. 
			- 디렉토리
				- 파일을 분류해 놓은 서류철. 폴더라고도 부름
		- 특수권한관리
			- setuid
				- 실행자 명령어가 실행자 권한이 아닌 사용자 권한으로 실행. 4000. s
				- /usr/bin/passwd 가 이 권한이라 /etc/passwd 수정가능
			- setgid
				- 파일 생성자 그룹 소유권 취득. 2000. d
			- stickybit
				- 공용 디렉토리 만들어 공유. 1000. t
				- 누구나 사용 가능하지만 소유자만 삭제가능.
	- 리눅스 명령어
		- who, w
			- 현재 로그인 사용자 정보
			- /var/run/utmp, 로그인 로그
		- tty
			- 사용 터미널 정보
		- /var/log/wtmp
			- 로그인 로그. last 로 실행.
			- 로그인/로그아웃, 시스템, 종료/부팅, 재부팅, 
		- /var/log/btmp
			- 로그인실패 로그. lastb 로 실행
		- syslog
			- 운영체제 로그 기록 데몬 프로세스. 
			- /etc/syslogd.conf 로 로그 기록 수준, 기록위치 결정.
		- cron
			- 일정 시간에 지정된 작업 반복 실행 프로세스. 
			- /etc/crontab 파일에 설정된것 읽어 작업수행
			- 취약점 반복검사. 악성코드 반복실행.
				-l, 로그인된 계정에 잡힌 작업스계줄
				-e, 로그인 중인 계정에 작업 등록
				-r, 현재 crontab 에 등록된 작업 삭제
				-u, 작업 실행 유저명 설정
		- at
			- 정해진 시간 한번만 실행
	- 악성코드 탐지
		- 리다이렉션
			- >, 표준 스트림으로 사용자가 지정한 곳 변경. 
		- 파이프
			- |, 명령어 2개 연속사용
		- find
			- 공격자의 예상행동
				- 백도어, 로그삭제, 리버스연결(방화벽은 보통 인바운드), 과한 권한 부여
			- 행위 탐지
				- 파일명, 과한 권한, 시간대 확인
			- wep shell(php, jsp 등)
			- find perm 6000...
			- find / -mtime +5
				- atime (access time)
				- mtime (modify time)
				- ctime (change time)
		- 특정 사용자가 소유자인 파일
		- 무결성 검사
			- tripwire : 해시값으로 파일 무결성 검사
	- 방화벽
		- iptables
- 윈도우
	- 파일시스템
		- FAT, NTFS 지원
		- NTFS
			- 파일 암호화 가능, 쿼터, FAT 호환불가, NT/2000/XP 사용가능
	- 인증 프로세스
		- winlogon
			- 윈도우 로그인 프로세스
		- GINA (msgina.dll)
			- winlog 가 로딩해 사용자 계정/암호 LSA 에게 전달
		- LSA (lsass.exe)
			- 계정/암호 검증. NTLM모듈 로딩하고 계정검증. SRM 작성 감사로그 기록.
		- SAM
			- 계정정보 저장. /etc/shadow같은 역할.
		- SRM
			- 고유 SID, 권한 부여
	- 실행 프로세스
		- c:/windows/system32 에 위치.
		- wininit.exe
			- 윈도우 시작 프로그램
		- services.exe
			- 윈도우 서비스 관리
		- lsm.exe
			- local session manager. 시스템 관리, 함수 실행, 서버 연결 관리
		- lsass.exe
			- Local Security Authority Subsystem Service
			- 로그인 검사, 비밀번호 관리, 엑세스 토큰, Security log 작성
		- svchost.exe
			- 서비스 관리 위한 프로세스. 
		- conhost.exe
			- 키보드, 마우스 입력, 문자출력, 콘솔 API 등 셸 기능
	- 실행파일 구조
		- .data, .Idata, .edata, .rsrc
	- 계정
		- 내장 사용자 계정
			- Users, Account Operator, Printer Operator, server Operator
		- 유니버셜 그룹 계정
			- Administrator, Users, Guest, Backup Operator, Power Users
	- NTFS
		- FAT 개선, 윈도우 서버용 파일시스템
		- USN 저널, ADS, Sparse 파일, 파일압축, VSS, EFS, Guotas, Unicode, 동적 bad cluster 할당,
		- 대용량 지원
		- 구조
			- VBR(Volume Boot Record)
				- 부트섹터, 부트코드, NTLDR 위치
			- MFT(Master File Table)
				- NTFS 메타정보, 파일/디렉터리 정보, 위치, 속성, 시간, 파일명, 크기
			- Data area
	- 공유폴더
		- share : 공유폴더 목록확인
	- 레지스트리
		- 정보 저장 관리 계층형 데이터베이스
		- key, value, datatype, data
		- 루트키
			- 최상위레벨 레지스트리키.
			- HKEY_CLASSES_ROOT
				- 확장자 정보, 연결 정보
			- HKEY_LOCAL_MACHINE
				- 드라이버 설정
			- HKEY_USERS
				- 사용자 정보
			- HKEY_CURRENT_CON-FIG
				- 디스플레이, 프린트 설정
		- 하이브
			- 레지스트 정보 가진 물리적 파일. 커널에서 관리.
			- SAM, SECURITY, SYSTEM, SOFTWARE, DEFAULT, NTUSER.DAT 에 존재. 
			- C:/WINDOWS/system32/config 에 존재. regback, 하이브 백업. 
			- 분석시 윈도우 로그 대부분 획득 가능.
		- 주요 키
			- HKLM/SOFTWARE/MICROSOFT/WINDOWSNT/CURRENTVERSION
				- 윈도우 버전정보
			- HKLM/SYSTEM/CONTROLSET00X/CONTROL/COMPUTERNAME/ACTIVECOMPUTERNAME
				- 컴퓨터 이름
			- HKEY_LOCAL_MACHINE/SOFTWARE/MICROSOFT/WINDOWS/CURRENTVERSION
			- HKEY_CURRENT_USER/SOFTWARE/MICROSOFT/WINDOWS/CURRENTVERSION
				- 시작프로그램 레지스트리키
			- HKU/USER/SOFTWARE/MICROSOFT/WINDOWS/CURRENTVERSION/EXPLORER/RUNMRU
				- 최근 명령어
		- 이벤트로그
			- 윈도우 이용내역 로그
			- .evt
			- 계속 기록 형식 아니라 일정 크기가 되면 덮어쓰는 형식.
			- 로그 종류
				- 응용프로그램 로그
				- 보안 로그
				- 시스템 로그
		- 웹 아티팩트 분석
			- 사용자가 웹사이트 이용흔적 분석. 캐시, 히스토리, 쿠키 분석.
			- 웹브라우저 캐시
				- 캐시 데이터
					- 다운받은 이미지, 텍스트, 아이콘
				- 캐시 인덱스 
					- 다운로드 URL, 시간, 데이터크기
			- 히스토리 정보
				- 방문 URL, 시간, 횟수, 제목
			- 웹브라우저 쿠키
				- 방문 로그
			- 위치
				- 하위 : index.dat (분산)
				- tkddnl : WebCacheV01.dat (통합)
	- 바이러스
		- 악성코드와 달리 자기복제 가능
		- 세대
			- 원시형
				- 아마추어. 주기억장치 상주, 부트영역/파일 감염. 
				- ex. 돌, 예루살렘 바이러스
			- 암호화
				- 프로그램 암호화, 백신 탐지 어려움.
				- ex. 폭포. 느림보.
			- 은폐형
				- 실행파일에 은폐해 크기 증가시킴. 백신으로 탐지 용이. 
				- ex. 맥가이버. 브레인. 512
			- 갑옷형
				- 다양한 암호화기법. 백신 탐지 어려움. 
				- ex. 다형성. 자체변형
			- 매크로
				- 엑셀, 워드같이 매크로명령 프로그램 감염. 
		- 감염대상
			- 부트
			- 파일
				- 기생형
				- 겹쳐쓰기형
				- 산란형
				- 연결형
		- DDE 취약점 (Dynamic Data Exchange)
			- 애플리케이션 간 데이터전송 프로토콜. 
			- 워드, 문서를 열때 연결 자동 업데이트 제거
	- 악성코드
		- shellcode
			- 취약점 공격 기계어 코드, 공격자가 시스템 명령 쉘 실행
			- 로컬쉘코드
				- 대상시스템에 제한된 접근권한 가진 경우 BOF등 취약점 있는 ROOT 권한 가진 프로세스 공격해 해당 프로세스와 같은 권한 획득하기 위해 사용.
			- 원격쉘코드
				- 네트워크상 취약점 존재 프로세스 공격시 사용
		- heapspray
			- 셸코드를 힙영역에 뿌림. 
			- free함수를 이용해 힙 메모리를 해제하고 뒤에 해제한 메모리를 가리키는 코드를 볼 수 있어 사용자가 그 사이 힙 메모리를 할당받는다면 스프레이를 통해 해당 포인터가 가리키는 주소까지 할당받을 수 있음.
			- 스프레이가 정상적으로 이루어지면 포인터가 가리키는 값은 다시 정상적으로 할당받은 힙 메모리가 되고 이곳에서 공격자 코드 실행. 
			- 특징
				- 스프레이 후 어떤 값이 포인터 주소에 정확히 위치하는지 알수 없어 코드 중간에 포인터가 위치하면 실패 가능
				- 메모리는 항상 연속된 위치에 할당되는 것이 아니며 기존 사용중 메모리 있거나 캐쉬된 메모리 재할당 등으로 빈틈 가능.
			- ASLR (Address space Layout Randomization)
				- 실행파일 메모리에 로드될 시 기본주소는 항상 동일하기에 이를 랜덤화.
				- 이를 이용해 해당 주소에 악성코드.
				- ASLR 설정 : sysctl -w kernel.randomize_va_space=1 
		- 버퍼 오버플로우
			- 프로세스 가용 메모리공간 초과 발생
			- 비권고 : strcpy, strcat, getwd, gets, scanf, sprint
			- 권고 : strncat, strncpy, fgets, fscanf, vfscaf, snprintf
		- 스택 버퍼 오버플로우
			- 스택에 저장된 복귀주소가 지역변수에 침범
		- 힙 버퍼 오버플로우
			- 동적 할당 공간이 힙에 저장되어 경계값을 검사하지 않고 사용시 메모리가 경계 초과
		- race condition
			- 두개 이상 프로세스 한정 자원 갖고 경쟁적으로 수행시 발생
		- APT (Advanced Persistent Threat)
			- SNS, Mail, Zeroday attack 등 다양한 공격 지속적으로 수행
			- 침투 > 탐색 > 수집/공격 > 유출
			- 바이너리 디핑
				- zero day attack 취약점 탐지 기법. 리버스 엔지니어링.
			

