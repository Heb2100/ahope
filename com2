- 컴파일러
	- 고급 언어로 작성된 프로그램을 목적코드로 변환후, 링킹으로 실행코드로 변환함
	- 특징
		- 번역이 오래걸리지만 속도가 빠름
		- 컴파일러가 생성하는 기계어는 특정 CPU나 OS에서만 동작해 플랫폼에 종속적임.
	- 배경지식
		- 목적코드
			- 컴파일의 결과값. 기계어. 
			- 링커는 여러 목적파일을 묶어 커널과 연결하여 실행파일을 만듦
			- 링크나 디버그 위해 런타임정보, 릴로케이션정보, 프로그램 심볼 등 포함
		- 실행코드
			- 명령에 따라 작업을 수행하는 파일. 이진파일. 
			- 목적코드에서 운영체제가 요구하는 코드가 추가됨.
		- 인터프리터
			- 소스코드를 바로 실행하는 프로그램 혹은 환경. 소스코드를 기계어로 번역하는 컴파일러와 대비됨.
			- 고급 명령어를 중간형태로 번역한 후 이를 실행함. 
	- 종류
		- 1패스 컴파일러
			- 프로그램 한번 읽어 목적코드 번역
			- 속도
		- 2패스 컴파일러
			- 프로그램 두번 읽어 목적코드 번역
			- 정의, 심볼테이블 구축 > 목적코드 생성
			- 이식성
			- 융통성
	- 과정
		- 어휘분석 > 구문분석 > 의미분석 > 파싱 > 중간코드 > 완성
		- 어휘분석
			- 소스코드를 읽어 문법적으로 의미있는 최소단위인 토큰으로 분리.
			- 종류
				- 어휘항목
					- 문자열, 식별자, 숫자, 키워드
				- 패턴
					- 토큰이 어휘항목을 서술하는 규칙. 
				- 토큰
					- 토큰 이름과 속성값으로 구성되는 데이터쌍. 토큰은 토큰의 패턴에 부합하는 어휘항목을 가짐. 
					- ex. if/if, for/for, num/0, 6, 3.14, id/val, distance, alpha, gusqhr2100 
			- 어휘오류
				- 소스코드상에서 정의되지 않은 어휘항목이 발견되었을 때 발생하는 오류. 
				- 어휘분석기가 독립적으로 어휘오류를 검출하는 것은 아주 어려움.
				- ex. if2(var == 5)
					- 이 코드에서 if2 가 if의 오류인지 함수이름인지를 판단하는 것은 심볼테이블을 참조해야 가능.
					- 어휘분석기가 심볼테이블을 생성하고 구문분석기가 어휘오류를 검출하는 것이 일반적.
		- 구문분석
			- 문맥자유분법
				- G = (V, T, P, S)
				- V, 언어에 대한 계층적 구조를 부여하는 nonterminal 의 유한집합. 
					- ex. A, B, C
				- T, 타 terminal이나 nonterminal로 유도가 불가능한 terminal의 유한집합. V, T는 서로소
					- ex. +, -, *
				- P, nonterminal과 terminal들이 조합되어 문자열을 생성할 수 있는 방법인 생성규칙의 유한집합. (V U T)'
					- ex. (, )
				- S, Start symbol. 문법은 항상 이거부터 시작. 
				- 생성규칙
					- 좌변엔 항상 1개의 nonterminal 만 온다. 
			- 파서
				- 소스코드 문자열을 분해해 파스트리를 생성하는 것
				- 보편적
				- 하향식 파싱
					- 문장에서 시작해 leaf node 까지 분해해나가는 방법
					- 종류
						- 재귀식 하강파싱
						- LL 파싱
				- 상향식 파싱
					- leaf node 부터 시작해 문장까지 조합해나가는 방법
					- 하항식의 단점 보완하고 성능이 좋아 컴파일러에서 많이 사용
					- 종류
						- 이동/감축 파싱
							- 이동/감축 두 연산으로 파싱. 
							- 언제 감축할지, 언제 어떤 생성규칙을 적용할지 결정
							- 연산종류
								- 이동
								- 감축
									- 대상문자열을 어떤 nonterminal 로 대체할지 결정
								- 수락
									- 파싱 성공 통소
								- 오류
									- 구문오류 발견 통보, 복구루틴 혹은 파싱중단
						- 단순 LR 파싱
			
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
